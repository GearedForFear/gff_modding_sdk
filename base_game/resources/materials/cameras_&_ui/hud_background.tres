[gd_resource type="VisualShader" load_steps=6 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=2]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=3]
function = 12

[sub_resource type="VisualShaderNodeVectorDecompose" id=4]

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "uv"

[resource]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// VectorDecompose:5
	float n_out5p0 = n_out6p0.x;
	float n_out5p1 = n_out6p0.y;
	float n_out5p2 = n_out6p0.z;

// ScalarOp:3
	float n_in3p1 = 0.50000;
	float n_out3p0 = n_out5p1 - n_in3p1;

// ScalarFunc:4
	float n_out4p0 = abs(n_out3p0);

// ScalarOp:2
	float n_in2p1 = 0.50000;
	float n_out2p0 = n_out4p0 + n_in2p1;

// Output:0
	COLOR.a = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -527.23, 77.4094 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 240, 140 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -100, 140 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 60, 160 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -300, 140 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -460, 140 )
nodes/fragment/connections = PoolIntArray( 5, 1, 3, 0, 3, 0, 4, 0, 4, 0, 2, 0, 6, 0, 5, 0, 2, 0, 0, 1, 5, 1, 3, 0, 3, 0, 4, 0, 4, 0, 2, 0, 6, 0, 5, 0, 2, 0, 0, 1 )
