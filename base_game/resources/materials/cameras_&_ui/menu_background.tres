[gd_resource type="VisualShader" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=2]

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[resource]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// VectorDecompose:3
	float n_out3p0 = n_out4p0.x;
	float n_out3p1 = n_out4p0.y;
	float n_out3p2 = n_out4p0.z;

// ScalarOp:2
	float n_in2p1 = 0.50000;
	float n_out2p0 = n_out3p1 * n_in2p1;

// Output:0
	COLOR.a = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -343.346, -21.0291 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 240, 140 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 40, 140 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -120, 140 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 1, 3, 1, 2, 0, 4, 0, 3, 0, 2, 0, 0, 1, 3, 1, 2, 0, 4, 0, 3, 0 )
